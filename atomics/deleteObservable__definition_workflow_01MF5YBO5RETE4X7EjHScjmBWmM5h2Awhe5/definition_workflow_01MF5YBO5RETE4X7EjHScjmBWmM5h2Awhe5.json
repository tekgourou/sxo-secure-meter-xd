{
  "workflow": {
    "unique_name": "definition_workflow_01MF5YBO5RETE4X7EjHScjmBWmM5h2Awhe5",
    "name": "SMXD - Delete Observable",
    "title": "SMXD - Delete Observable",
    "type": "generic.workflow",
    "base_type": "workflow",
    "variables": [
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "input",
          "name": "observable_value",
          "type": "datatype.string",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01MF5YBNZ36IH0NI17WGcUgoohD0MBu3Rdj",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "input",
          "name": "observable_type",
          "type": "datatype.string",
          "is_required": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01MW14MD02RXC5CqLxtbLrPKNKekqnVj3Pp",
        "object_type": "variable_workflow"
      }
    ],
    "properties": {
      "atomic": {
        "atomic_group": "Secure MeterXD",
        "is_atomic": true
      },
      "delete_workflow_instance": false,
      "description": "Delete an observable based on its value and type from the Global SMXD Observable table\n\nTarget: N/A\n\nAccount Key: N/A\n\nSteps:\n[] Delete the observable from the Global SMXD observable table\n[]\u003e If 1 row was affected, complete with success\n[]\u003e If not, complete with failure\n\nMore details are available at https://github.com/kcdubois/sxo-secure-meter-xd\n\n",
      "display_name": "SMXD - Delete Observable",
      "runtime_user": {
        "override_target_runtime_user": false,
        "specify_on_workflow_start": false,
        "target_default": true
      },
      "target": {
        "execute_on_target_group": false,
        "execute_on_workflow_target": false,
        "no_target": true,
        "specify_on_workflow_start": false
      }
    },
    "object_type": "definition_workflow",
    "actions": [
      {
        "unique_name": "definition_activity_01MF60ZVAD7V84sJum8prcz2yMZxGwzHkkc",
        "name": "Delete from Table",
        "title": "Delete from Table",
        "type": "core.deleterowfromtable",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": false,
          "display_name": "Delete from Table",
          "input_table": "$global.variable_01MF4XQ8JH2PL6TZ9JERt7MTNTpzV3GfgD3.global.variable_01MF4XQ8JH2PL6TZ9JERt7MTNTpzV3GfgD3$",
          "rows": {
            "rows_matching_criteria": true,
            "where_clause": "observable == '$workflow.definition_workflow_01MF5YBO5RETE4X7EjHScjmBWmM5h2Awhe5.input.variable_workflow_01MF5YBNZ36IH0NI17WGcUgoohD0MBu3Rdj$' AND type == \"$workflow.definition_workflow_01MF5YBO5RETE4X7EjHScjmBWmM5h2Awhe5.input.variable_workflow_01MW14MD02RXC5CqLxtbLrPKNKekqnVj3Pp$\""
          },
          "skip_execution": false
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_01MF5YDE4D9NV5kCmP0H05kFpzYVrNwibxV",
        "name": "Condition Block",
        "title": "Observable found?",
        "type": "logic.if_else",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "display_name": "Observable found?",
          "skip_execution": false
        },
        "object_type": "definition_activity",
        "blocks": [
          {
            "unique_name": "definition_activity_01MF5YDQCQMKU3AvRUTjj4yXTVVDBboZVv8",
            "name": "Condition Branch",
            "title": "Yes",
            "type": "logic.condition_block",
            "base_type": "activity",
            "properties": {
              "condition": {
                "left_operand": "$activity.definition_activity_01MF60ZVAD7V84sJum8prcz2yMZxGwzHkkc.output.row_count$",
                "operator": "eq",
                "right_operand": 1
              },
              "continue_on_failure": false,
              "display_name": "Yes",
              "skip_execution": false
            },
            "object_type": "definition_activity",
            "actions": [
              {
                "unique_name": "definition_activity_01MF5YDSUT1LK58VcwguleozY8MfyIgOcDY",
                "name": "Completed",
                "title": "Succeeded",
                "type": "logic.completed",
                "base_type": "activity",
                "properties": {
                  "completion_type": "succeeded",
                  "continue_on_failure": false,
                  "display_name": "Succeeded",
                  "result_message": "Observable deleted",
                  "skip_execution": false
                },
                "object_type": "definition_activity"
              }
            ]
          },
          {
            "unique_name": "definition_activity_01MF5YE4QHQMB40KAUfs9KZ4jDky2Lo2s8J",
            "name": "Condition Branch",
            "title": "No",
            "type": "logic.condition_block",
            "base_type": "activity",
            "properties": {
              "condition": {
                "left_operand": "$activity.definition_activity_01MF60ZVAD7V84sJum8prcz2yMZxGwzHkkc.output.row_count$",
                "operator": "eq",
                "right_operand": 0
              },
              "continue_on_failure": false,
              "display_name": "No",
              "skip_execution": false
            },
            "object_type": "definition_activity",
            "actions": [
              {
                "unique_name": "definition_activity_01MF62DA7958H4QwtxcdM59hu9s7TLGd3Dv",
                "name": "Completed",
                "title": "Failed",
                "type": "logic.completed",
                "base_type": "activity",
                "properties": {
                  "completion_type": "failed-completed",
                  "continue_on_failure": false,
                  "display_name": "Failed",
                  "result_message": "Observable not found",
                  "skip_execution": false
                },
                "object_type": "definition_activity"
              }
            ]
          }
        ]
      }
    ],
    "categories": [
      "category_01EI33LMFFL7N5eTQLsOOJIrxdlSOHb7r3r"
    ]
  },
  "categories": {
    "category_01EI33LMFFL7N5eTQLsOOJIrxdlSOHb7r3r": {
      "unique_name": "category_01EI33LMFFL7N5eTQLsOOJIrxdlSOHb7r3r",
      "name": "SecureX",
      "title": "SecureX",
      "type": "basic.category",
      "base_type": "category",
      "category_type": "custom",
      "object_type": "category"
    }
  },
  "variables": {
    "variable_01MF4XQ8JH2PL6TZ9JERt7MTNTpzV3GfgD3": {
      "unique_name": "variable_01MF4XQ8JH2PL6TZ9JERt7MTNTpzV3GfgD3",
      "schema_id": "tabletype_01MF4WGQQ9KTZ6pHPdsUJe0wTHBJ7IpSxil",
      "properties": {
        "value": [
          {
            "column_data": {
              "last_modified": "2021-03-09T21:36:31.461005866Z",
              "observable": "10.0.0.1",
              "related": "",
              "score": 10,
              "type": "ip"
            }
          },
          {
            "column_data": {
              "last_modified": "2021-03-09T06:00:08.614584805Z",
              "observable": "172.16.47.36",
              "score": 4,
              "type": "ip"
            }
          },
          {
            "column_data": {
              "last_modified": "2021-03-10T06:00:10.682964339Z",
              "observable": "172.16.46.18",
              "score": 4,
              "type": "ip"
            }
          }
        ],
        "scope": "global",
        "name": "Secure_Meter_XD",
        "type": "datatype.table",
        "is_required": false,
        "is_invisible": false
      },
      "object_type": "variable"
    }
  },
  "table_types": {
    "tabletype_01MF4WGQQ9KTZ6pHPdsUJe0wTHBJ7IpSxil": {
      "unique_name": "tabletype_01MF4WGQQ9KTZ6pHPdsUJe0wTHBJ7IpSxil",
      "data_type": "datatype.tabletype",
      "display_name": "Secure_Meter_XD_Observables",
      "description": "Table used to contain observables tracked by Secure Meter XD",
      "columns": [
        {
          "name": "last_modified",
          "title": "last_modified",
          "type": "date"
        },
        {
          "is_required": true,
          "name": "observable",
          "title": "observable",
          "type": "string"
        },
        {
          "name": "related",
          "title": "related",
          "type": "string"
        },
        {
          "is_required": true,
          "maximum": 10,
          "minimum": 1,
          "name": "score",
          "title": "score",
          "type": "integer"
        },
        {
          "is_required": true,
          "name": "type",
          "title": "type",
          "type": "string"
        }
      ],
      "base_type": "datatype",
      "object_type": "tabletype"
    }
  }
}